{
  "parser": "@babel/eslint-parser",
  "parserOptions": {
    "ecmaVersion": 2018,
    "sourceType": "module"
  },
  "plugins": ["react", "import"],
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "prettier"
  ],
  "ignorePatterns": ["**/*.js"],
  "rules": {
    "eqeqeq": ["error", "always", { "null": "ignore" }],
    "id-length": [
      "error",
      { "min": 2, "exceptions": ["_", "a", "b", "i", "j", "x", "y"] }
    ],
    "no-prototype-builtins": "off",

    "react/jsx-sort-props": [
      "error",
      { "shorthandLast": true, "callbacksLast": true }
    ],
    "react/jsx-uses-react": "error",
    "react/jsx-uses-vars": "error",

    "import/newline-after-import": "error",
    "import/order": [
      "error",
      {
        "alphabetize": { "order": "asc", "caseInsensitive": true },
        "groups": [
          "builtin",
          "external",
          "internal",
          ["parent", "sibling"],
          "index",
          "unknown"
        ],
        "newlines-between": "always",
        "pathGroups": [
          { "pattern": "@assets/**", "group": "internal" },
          { "pattern": "@src/**", "group": "internal" }
        ],
        "pathGroupsExcludedImportTypes": ["builtin"]
      }
    ]
  },
  "env": {
    "browser": true,
    "es6": true
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "overrides": [
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "env": { "browser": true, "es6": true },
      "extends": [
        "eslint:recommended",
        "plugin:react/recommended",
        "plugin:react-hooks/recommended",
        "plugin:@typescript-eslint/recommended",
        "prettier"
      ],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "ecmaFeatures": { "jsx": true },
        "ecmaVersion": 2018,
        "sourceType": "module",
        "project": "./tsconfig.json"
      },
      "plugins": ["react", "@typescript-eslint"],
      "rules": {
        "no-prototype-builtins": "off",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "interface",
            "format": ["PascalCase"],
            "custom": {
              "regex": "^I[A-Z]",
              "match": false
            }
          }
        ],
        "@typescript-eslint/no-empty-interface": [
          "error",
          {
            "allowSingleExtends": true
          }
        ],
        "@typescript-eslint/explicit-module-boundary-types": ["off"]
      }
    }
  ]
}
